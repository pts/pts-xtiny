#! /bin/sh
# by pts@fazekas.hu at Sun Oct 19 13:46:41 CEST 2014

""":" #xtiny: wrapper tool for creating tiny i386 executables

type python2.7 >/dev/null 2>&1 && exec python2.7 -- "$0" ${1+"$@"}
type python2.6 >/dev/null 2>&1 && exec python2.6 -- "$0" ${1+"$@"}
type python2.5 >/dev/null 2>&1 && exec python2.5 -- "$0" ${1+"$@"}
type python2.4 >/dev/null 2>&1 && exec python2.4 -- "$0" ${1+"$@"}
exec python -- ${1+"$@"}; exit 1

pts-xtiny is a collection of tools and a small and incomplete libc for
creating tiny (200-byte), statically linked ELF executables on Linux i386.

Instead of your regular `gcc ...' command, run `xtiny gcc ...'. Use
`#include <xtiny.h>' for some library (libc) functions. See
http://github.com/pts/pts-xtiny for more information.
"""

import os
import os.path
import pipes
import re
import stat
import struct
import subprocess
import sys


STDARG_DIR_RE = re.compile(r'"(/[^\n"]*)/stdarg[.]h"')


def find_compiler_include_dir(compiler, progdir):
  e_cmd = (compiler, '-m32', '-E', '%s/stdarginc.c' % progdir)
  try:
    p = subprocess.Popen(e_cmd, stdout=subprocess.PIPE)
  except (IOError, OSError), e:
    sys.stderr.write('fatal: Running %s failed: %s\n' % (compiler, e))
    sys.exit(3)
  try:
    data = p.stdout.read()
  finally:
    exit_code = p.wait()
  if exit_code:
    sys.stderr.write(
        'fatal: Running %s failed with code %d\n' % (compiler, exit_code))
    sys.exit(3)
  dirs = set(STDARG_DIR_RE.findall(data))
  if not dirs:
    sys.stderr.write('fatal: compiler include dir not found\n')
    sys.exit(3)
  if len(dirs) > 1:
    sys.stderr.write('fatal: multiple compiler include dirs found: %r\n' %
                      dirs)
    sys.exit(3)
  compiler_include_dir = iter(dirs).next()
  if not os.path.isdir(compiler_include_dir):
    sys.stderr.write('fatal: compiler include dir does not exist: %s\n' %
                      compiler_include_dir)
    sys.exit(3)
  return compiler_include_dir


def get_bdir_prog_path(compiler, bdir, prog):
  cmd = [compiler, '-m32']
  if bdir is not None:
    cmd.extend(('-B', bdir))
  cmd.extend(('-print-prog-name=%s' % prog,))
  try:
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
  except (IOError, OSError), e:
    sys.stderr.write('fatal: Running %s failed: %s\n' % (compiler, e))
    sys.exit(4)
  try:
    data = p.stdout.read()
  finally:
    exit_code = p.wait()
  if exit_code:
    sys.stderr.write(
        'fatal: Running %s failed with code %d\n' % (compiler, exit_code))
    sys.exit(4)
  if len(data) < 2 or data.find('\n') != len(data) - 1:
    sys.stderr.write('fatal: prog %s name not found\n' % prog)
    sys.exit(4)
  return data[:-1]


def run_in_subprocess(function, args):
  """Runs function(*args) in a child process, waits and propagates failure."""
  pid = os.fork()
  if not pid:  # Child.
    try:
      function(*args)
    finally:
      os._exit(125)
  pid2, status = os.waitpid(pid, 0)
  assert pid == pid2
  if status:  # cmd has failed.
    # This doesn't propagate WIFSIGNALED correctly, but all we care is that
    # the exit status is nonzero on failure.
    sys.exit((status >> 8) or status)


def _exec_command(cmd, cmd_name):
  try:
    os.execvp(cmd[0], cmd)
  except OSError, e:
    sys.stderr.write(
        'fatal: exec of %s %s failed: %s\n' % (cmd_name, cmd[0], e))
    sys.exit(2)


def run_command(cmd, cmd_name, is_verbose, do_exec):
  """Run the specified command and maybe exit.

  If the command fails (i.e. non-zero exit status), exit, propagating the
  exit status.

  Args:
    cmd: A sequence of strings, cmd[0] is the command name, cmd[1:] are the
      arguments (thus cmd is argv). os.execvp is used, so cmd[0] will be
      looked up on getenv('PATH').
    cmd_name: A human-readable single-word string explaining what the command
      does. For debugging.
    is_verbose: bool indicating whether to print cmd before running it.
    do_exec: bool indicating whether to exit even after cmd has succeded (zero
      exit status). This is implemented by execing (i.e. execvp(3)).
  """
  if is_verbose:
    sys.stderr.write('xtiny running %s: %s\n' % (
        cmd_name, ' '.join(map(pipes.quote, cmd))))
  args = (cmd, cmd_name)
  if do_exec:
    _exec_command(*args)
  else:
    run_in_subprocess(_exec_command, args)


def remove_note_gnu_stack_from_elfo(filename):
  """Removes the .note.GNU-stack section from an ELF relocatable.

  Actually it just renames the section so that GNU ld doesn't recognize it,
  and thus it won't emit a program header PT_GNU_STACK.

  Args:
    filename: Input filename. The file ill be modified in place.
  Returns:
    bool indicating whether .note.GNU-stack was found.
  """
  f = open(filename, 'rb+')
  try:
    ehdata = f.read(0x34)
    if len(ehdata) != 0x34:
      raise ValueError
    # https://en.wikipedia.org/wiki/Executable_and_Linkable_Format
    if not ehdata.startswith('\x7fELF\1\1\1'):
      raise ValueError('Not a 32-bit MSB-first ELF v1 file.')
    (e_phoff, e_shoff, e_flags, e_ehsize, e_phentsize, e_phnum, e_shentsize,
     e_shnum, e_shstrndx) = struct.unpack('<LLLHHHHHH', ehdata[0x1c : 0x34])
    if e_shentsize != 0x28:
      raise ValueError
    if ehdata[0x10] != '\1':
      raise ValueError('Expected relocatable (.o file).')
    f.seek(e_shoff + e_shstrndx * 0x28)
    shdata = f.read(0x28)
    if len(shdata) != 0x28:
      raise ValueError
    sh_offset, sh_size = struct.unpack('<LL', shdata[0x10 : 0x18])
    if sh_size >> 12:
      # Typically it's 80..200 bytes.
      raise ValueError('shstrtab larger than 4 kB.')
    f.seek(sh_offset)
    shstrtab = f.read(sh_size)
    if len(shstrtab) != sh_size:
      raise ValueError
    data = '\0' + shstrtab
    i = data.find('\0.note.GNU-stack\0')
    if i < 0:
      return False
    f.seek(sh_offset + i)  # Offset of '.note.GNU-stack' in .o file.
    # Anything else with the same size as '.note.GNU-stack').
    f.write('.note.xty-stack')
    return True
  finally:
    f.close()  # Works even if fout == f.


def get_elf_section_names(filename):
  f = open(filename, 'rb')
  try:
    ehdata = f.read(0x34)
    if len(ehdata) != 0x34:
      raise ValueError
    # https://en.wikipedia.org/wiki/Executable_and_Linkable_Format
    if not ehdata.startswith('\x7fELF\1\1\1'):
      raise ValueError('Not a 32-bit MSB-first ELF v1 file.')
    (e_phoff, e_shoff, e_flags, e_ehsize, e_phentsize, e_phnum, e_shentsize,
     e_shnum, e_shstrndx) = struct.unpack('<LLLHHHHHH', ehdata[0x1c : 0x34])
    if e_shentsize != 0x28:
      raise ValueError
    if e_shnum == 0:
      return []
    f.seek(e_shoff)
    shdata = f.read(0x28 * e_shnum)
    if len(shdata) != 0x28 * e_shnum:
      raise ValueError
    if e_shstrndx >= e_shnum:
      raise ValueError
    shsdata = shdata[0x28 * e_shstrndx : 0x28 * (e_shstrndx + 1)]
    sh_offset, sh_size = struct.unpack('<LL', shsdata[0x10 : 0x18])
    if sh_size >> 12:
      # Typically it's 80..200 bytes.
      raise ValueError('shstrtab larger than 4 kB.')
    f.seek(sh_offset)
    shstrtab = f.read(sh_size)
    if len(shstrtab) != sh_size:
      raise ValueError
    section_names = []
    for sho in xrange(0, 0x28 * e_shnum, 0x28):
      sh_name, = struct.unpack('<L', shdata[sho : sho + 4])
      if sh_name >= len(shstrtab):
        raise ValueError
      j = shstrtab.find('\0', sh_name)
      if j < 0:
        raise ValueError
      section_names.append(shstrtab[sh_name : j])
    return section_names
  finally:
    f.close()  # Works even if fout == f.


def sstrip_elf_executable(filename):
  """Removes section headers and unnecessary functions fom an ELF executable.

  It also changes ei_osabi to GNU/Linux.

  Args:
    filename: Input filename. The file ill be modified in place.
  """
  f = open(filename, 'rb+')
  try:
    ehdata = f.read(0x34)
    if len(ehdata) != 0x34:
      raise ValueError
    # https://en.wikipedia.org/wiki/Executable_and_Linkable_Format
    if not ehdata.startswith('\x7fELF\1\1\1'):
      raise ValueError('Not a 32-bit MSB-first ELF v1 file.')
    (e_phoff, e_shoff, e_flags, e_ehsize, e_phentsize, e_phnum, e_shentsize,
     e_shnum, e_shstrndx) = struct.unpack('<LLLHHHHHH', ehdata[0x1c : 0x34])
    if e_phentsize != 0x20:
      raise ValueError
    if ehdata[0x10] != '\2':
      raise ValueError('Expected an executable file.')
    if e_phnum >> 7:  # Typically there is 1 or 2 in statically linked exec.
      raise ValueError('Too many program header entries.')
    f.seek(e_phoff)
    phdata = f.read(0x20 * e_phnum)
    if len(phdata) != 0x20 * e_phnum:
      raise ValueError
    truncate_ofs = max(0x34, e_phoff + 0x20 * e_phnum)
    for pho in xrange(0, 0x20 * e_phnum, 0x20):
      (p_type, p_offset, p_vaddr, p_paddr, p_filesz, p_memsz, p_flags,
       p_align) = struct.unpack('<8L', phdata[pho : pho + 0x20])
      if p_type == 1 and 0 < p_offset < 0x1000:  # p_type == PT_LOAD.
        # Prevent upx CantPackException: Go-language PT_LOAD.
        # Prevent invalid Phdr p_offset; (without upx --force-exece).
        p_vaddr -= p_offset
        p_paddr -= p_offset
        p_filesz += p_offset
        p_memsz += p_offset
        p_offset = 0
        newphdata = struct.pack('<8L', p_type, p_offset, p_vaddr, p_paddr,
                                p_filesz, p_memsz, p_flags, p_align)
        f.seek(e_phoff + pho)
        f.write(newphdata)
      truncate_ofs = max(truncate_ofs, p_offset + p_filesz)
    f.seek(7)
    f.write('\3')  # ei_osabi = GNU/Linux.
    f.seek(0x20)
    f.write('\0\0\0\0')  # e_shoff = 0.
    f.seek(0x30)
    f.write('\0\0\0\0')  # e_shnum = e_shstrndx = 0.
    # TODO(pts): Remove trailing \0 from EOF.
    f.truncate(truncate_ofs)
  finally:
    f.close()  # Works even if fout == f.


def maybe_remove_files(filenames):
  for filename in filenames:
    try:
      os.remove(filename)
    except OSError:
      pass


LIB_XTINY_START_A_RE = re.compile(r'/lib__xtiny_start_([ni][nf])[.]a\Z')


def find_xtiny_start_a(cmd):
  """Returns the index of .../lib__xtiny_start_??.o in cmd[1:], or -1."""
  for i in xrange(1, len(cmd)):
    arg = cmd[i]
    if arg.startswith('-'):
      continue
    match = LIB_XTINY_START_A_RE.search(arg)
    if match:
      return i, match.start(1)
  return -1, -1


def get_start_suffix_from_e_flags(filename):
  # The linker script `-T xtiny.scr' emits an ELF executable without section headers,
  # so we need to look up the presence of .init_array and .fini_array elsewhere:
  # in the e_flags bits generated by IF_SIGNIFIER in xtiny.scr.
  f = open(filename, 'rb')
  try:
    data = f.read(40)
    flags, = struct.unpack('<L', data[36 : 40])
    if flags & ~0x3000000:
      raise ValueError('Unexpected e_flags from linker script.')
    return 'ni'[(flags >> 24) & 1] + 'nf'[(flags >> 25) & 1]
  finally:
    f.close()


def get_start_suffix_from_sections(filename):
  section_names = set(get_elf_section_names(filename))
  if not section_names:
    # This is unexpected, `ld' should generate at least '', '.shstrtab',
    # and one of '.text', '.bss', '.data', '.rodata'.
    sys.stderr.write(
        'xtiny: fatal: missing section names in: %s\n' % filename)
    sys.exit(1)
  return ('ni'['.init_array' in section_names] +
          'nf'['.fini_array' in section_names])


def wrap_linker(argv, prgdir):
  """When xtiny is called as a linker as bdir/ld --xtiny-run-ld."""
  cmd = [None]
  argi = 1
  linkdirs = []
  def add_linkdir(linkdir):
    if linkdir.startswith('='):
      linkdir = '/' + linkdir[1:]  # sysroot dir for xtiny is /
    linkdirs.append('-L' + linkdir)
  is_verbose = False
  do_gc_sections = False
  has_custom_linker_script = False
  has_entry = False
  m_arg = None
  used_object_files = set()
  output_file = 'a.out'
  do_debug = True
  do_sstrip = True
  do_try_relink_start = True
  while argi < len(argv):
    arg = argv[argi]
    argi += 1
    if arg == '--xtiny-run-ld':
      # The parent xtiny has called us with `--xtiny-run-ld <ld-prog>'.
      if argi == len(argv):
        sys.stderr.write('xtiny: fatal: missing arg for --xtiny-run-ld')
        sys.exit(1)
      is_found = True
      cmd[0] = argv[argi]
      del argv[:argi + 1]
      argi = None
      break
    elif arg == '--xtiny-ld-noss':
      do_sstrip = False
    elif arg == '--xtiny-ld-notrs':
      do_try_relink_start = False
    elif arg == '--xtiny-ld-v':
      is_verbose = True
    elif arg == '--xtiny-ld-uof':
      while argi < len(argv):
        arg = argv[argi]
        argi += 1
        if arg == '--xtiny-ld-uof-end':
          break
        used_object_files.add(arg)
      else:
        sys.stderr.write('xtiny: fatal: missing --xtiny-ld-uof-end')
        sys.exit(1)
      # Actual argv elements with used_object_files will come later, since
      # --xtiny-ld-uof was added early.
    elif arg.startswith('-l'):
      sys.stderr.write('xtiny: fatal: library too early: %s\n' % arg)
      sys.exit(1)
    elif arg == '-L---':
      # Append -L... directories explicitly specified in the compiler cmdline,
      # and already saved to linkdirs.
      #
      # The linker command line typically has -Lexplicitly -L--- -L/system, and
      # we want to omit the -L/system.
      cmd[1 : 1] = linkdirs
      linkdirs = []
    elif arg.startswith('-L'):
      if arg == '-L' and argi < len(argv):  # Doesn't happen.
        add_linkdir(argv[argi])
        argi += 1
      else:
        add_linkdir(arg[2:])
    elif arg.startswith('--library-path='):
      add_linkdir(arg.split('=' , 1)[1])
    elif arg.startswith('--sysroot='):
      pass  # Ignore --sysroot, Binutils compiled without --with-sysroot doesn't support it.
    elif arg == '--gc-sections':
      do_gc_sections = True
      cmd.append(arg)
    elif arg == '-T':
      # GNU ld expects -T after the .o and .a files, so we do it this late.
      sys.stderr.write('xtiny: fatal: -T specified too early')
      sys.exit(2)
    elif arg in ('-e', '--entry') or arg.startswith('--entry='):
      has_entry = True
      cmd.append(arg)
    elif arg == '-m' and argi < len(argv):
      cmd.extend((arg, argv[argi]))
      m_arg = argv[argi]
      argi += 1
    elif arg == '-o' and argi < len(argv):
      cmd.extend((arg, argv[argi]))
      output_file = argv[argi]
      argi += 1
    elif arg == '-z' and argi < len(argv) and argv[argi] in ('relro', 'norelro'):
      # GNU gold 1.11 in GNU Binutils 2.24 fails with `-z relro':
      #   gold: internal error in set_offset, at ../../gold/output.cc:4728
      # `-z relro' is not useful for us anyway (it should be a noop for static
      # linking), so we just remove it.
      argi += 1
    elif arg == '-s':
      do_debug = False
      cmd.append(arg)
    else:
      cmd.append(arg)
  assert cmd[0] is not None, 'missing --xtiny-run-ld flag'
  assert '-L---' not in argv, '-L--- specified too late'
  if '-T' in argv:
    has_custom_linker_script = True
  if used_object_files:
    uus = used_object_files.difference(argv)
    if uus:
      sys.stderr.write(
          'xtiny: warning: used object file not on linker command-line: %s\n' %
          '  '.join(uus))
  for arg in argv:
    if (not arg.startswith('-') and arg.endswith('.o') and
        arg not in used_object_files):
      # arg is a filename of a temporary object file.
      remove_note_gnu_stack_from_elfo(arg)
    elif arg == '--gc-sections':  # Usually here if by explicit -Wl,--gc-sections.
      do_gc_sections = True
  cmd.extend(argv)
  relink_cmd = []
  to_remove_after_link = []
  ro_output_file = output_file
  if do_gc_sections and has_custom_linker_script:
    # GNU ld 2.24 doesn't support --gc-sections and -T together, so we do it
    # in 2 steps with -r: It seems that --gc-sections is ignored, unused code
    # is retained, as evidenced by -Wl,--print-gc-sections.
    #
    # Unfortunately, as a side-effect, `ld -r --gc-sections' eliminates
    # .init_array and .text.startup.* sections, so constructors would be
    # omitted.
    i = cmd.index('-T')
    linker_script = cmd[i + 1]
    cmd[i : i + 2] = []
    if not has_entry:
      cmd.extend(('-e', '_start'))
    cmd.append('-r')
    i, output_file_idx = 2, None
    while i < len(cmd):
      if cmd[i - 1] == '-o':
        output_file_idx = i
      i += 1
    if output_file_idx is None:
      output_file = 'a.out'
      # We could also use tempfile.mkstemp.
      ro_output_file = output_file + '.xtiny-r.o'
      cmd.extend(('-o', ro_output_file))
    else:
      output_file = cmd[output_file_idx]
      # We could also use tempfile.mkstemp.
      ro_output_file = output_file + '.xtiny-r.o'
      cmd[output_file_idx] = ro_output_file
    relink_cmd = [cmd[0]]
    if m_arg is not None:  # Example: -m elf_i386
      relink_cmd.extend(('-m', m_arg))
    relink_cmd.extend(('-o', output_file, ro_output_file))
    relink_cmd.extend(('-T', linker_script))
    to_remove_after_link = [ro_output_file]
  do_sstrip = do_sstrip and not has_custom_linker_script and not do_debug
  try:
    # Always do_exec=False because need to find .init_array etc.
    run_command(cmd, 'linker', is_verbose, do_exec=False)
    do_relink_start = False
    if do_try_relink_start:
      if has_custom_linker_script and not relink_cmd:
        start_suffix = get_start_suffix_from_e_flags(ro_output_file)
      else:
        start_suffix = get_start_suffix_from_sections(ro_output_file)
      i, j = find_xtiny_start_a(cmd)
      if i < 0:
        # This is unexpected, specified below.
        sys.stderr.write('xtiny: fatal: not linked to xtiny__lib_start_??.a\n')
        sys.exit(1)
      new_start_a = ''.join((cmd[i][:j], start_suffix, cmd[i][j + 2:]))
      if cmd[i] != new_start_a:
        cmd[i] = new_start_a
        do_relink_start = True
      start_suffix = new_start_a = None
    if do_relink_start:
      # We need to link against lib__xtiny_start_??.a other than the default
      # lib__xtiny_start_nn.a if the sections .init_array or .fini_array are
      # present in the executable, because lib__xtiny_start_nn.a doesn't call
      # constructors or destructors.
      #
      # We need the most specific lib__xtiny_start_??.a, because _start is
      # implemented in a way that would segfault with empty .init_array in
      # the wrong library.
      run_command(cmd, 'restart-linker', is_verbose,
                  do_exec=not (do_sstrip or relink_cmd))
    if do_sstrip:
      is_ok = False
      try:
        sstrip_elf_executable(output_file)
        is_ok = True
      finally:
        if not is_ok:
          maybe_remove_files((output_file,))
    if relink_cmd:
      # Use do_exec=False so we can clean up files (os.remove) below.
      run_command(relink_cmd, 'relink-linker', is_verbose, do_exec=False)
  finally:
    maybe_remove_files(to_remove_after_link)


def follow_symlinks(prog):
  try:
    while stat.S_ISLNK(os.lstat(prog).st_mode):
      prog = os.path.join(os.path.dirname(prog), os.readlink(prog))
      # TODO(pts): Collapse ..s in the path etc.
  except OSError, e:
    pass
  return prog


def add_dir_from_path(prog):
  if '/' not in prog:
    for dirname in os.getenv('PATH', '/bin:/usr/bin').split(':'):
      prog2 = os.path.join(dirname, prog)
      if os.path.isfile(prog2):
        return prog2
  return prog


def does_contain_linker_plugin(cmd):
  """Returns bool indicating whether the compiler supports
  -fno-use-linker-plugin.

  gcc-4.8 doesn't support it, gcc-6.4 and gcc-7.3 do. Without
  -fno-use-linker-plugin in these compilers, linking fails with ld.xtiny
  (because that ld doesn't support amd64 plugins, and we don't want the
  system gcc plugins interfere with xtiny linking anyway).
  """
  cmd = list(cmd)
  cmd.append('-dumpspecs')
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
  try:
    data = p.stdout.read()
  finally:
    exit_code = p.wait()
  if exit_code:
    sys.stderr.write(
        'fatal: Running %s failed with code %d\n' % (cmd[0], exit_code))
    sys.exit(4)
  return '!fno-use-linker-plugin:' in data


def main(argv):
  if len(argv) < 2 or argv[1] == '--help':
    sys.stderr.write(
        'Usage: %s <gcc|g++|clang|clang++> [<compiler-arg>...]\n'
        'Invokes the C/C++ compiler with -static against the xtiny libc\n' %
        (argv or 'xtiny')[0])
    sys.exit(1)
  prog = follow_symlinks(__file__)
  progdir = os.path.dirname(prog)
  if '--xtiny-run-ld' in argv[1:]:
    return wrap_linker(argv, progdir)
  compiler_cmd = [argv[1]]
  compiler_basename = os.path.basename(compiler_cmd[0])
  is_clang = 'clang' in compiler_basename
  compiler_include_dir = None
  compiler_ld = None

  if is_clang:
    compiler2 = add_dir_from_path(follow_symlinks(compiler_cmd[0]))
    if '/' in compiler2:
      compiler2dir = os.path.dirname(compiler2)
      # With pts-clang, use clang.bin, because the clang wrapper doesn't
      # allow -B.
      if not compiler2.endswith('.bin'):
        compiler2 += '.bin'
      p = os.path.basename(compiler2)
      if p.endswith('.bin'):
        p = p[:-4]
      i = p.rfind('-')
      if i < 0:
        i = len(p)
      compiler_suffix = p[i:]
      compiler_include_dir = (
          compiler2dir + '/../clanginclude' + compiler_suffix)
      if (os.path.isfile(compiler_include_dir + '/stdarg.h') and
          os.path.isfile(compiler2)):
        compiler_basename = os.path.basename(compiler_cmd[0])
        if '++' in compiler_basename:
          if '-3.' not in compiler_basename or (
              '-3.0' in compiler_basename and
              '-3.1' in compiler_basename and
              '-3.2' in compiler_basename and
              '-3.3' in compiler_basename):
            compiler_cmd.append('-ccc-cxx')
          else:
            compiler_cmd.append('--driver-mode=g++')
        compiler_cmd[0] = compiler2
        p = compiler2dir + '/../clangld32/ld.bin'
        if os.path.isfile(p):
          compiler_ld = p
        p = None
      else:
        compiler_include_dir = None
      compiler_suffix = None  # Save memory.
  compiler_basename = None  # Save memory.

  is_verbose = False
  opt = None
  has_debug = False
  do_link = True
  args_kept = []
  do_stdinc = True
  is_compiling = False
  is_preproc = False
  bdir = None
  do_xtiny_wrap_linker = True
  do_xtiny_gc_sections = False
  # The default is false (i.e. don't use `-T xtiny.scr'), see the known
  # limitations in Q27 in README.txt.
  do_xtiny_linker_script = False
  has_gc_sections = False
  # List of .o filenames being written by the current command.
  output_object_files = []
  # List of .o filenames specified in the command-line as .o.
  used_object_files = []
  is_writing_object_files = False
  output_file = None
  do_xtiny_sstrip = True
  do_defaultlibs = True
  do_startfiles = True
  xtiny_ld = None
  forward_malloc_heap_size = None

  argi = 2  # Skip xtiny (argv[0]) and the compiler.
  while argi < len(argv):
    arg = argv[argi]
    argi += 1
    if not arg.startswith('-'):
      base, ext = os.path.splitext(os.path.basename(arg))
      if ext in ('.cc', '.cp', '.cxx', '.cpp', '.c++', '.C',  # C++.
                 '.c', '.i', '.ii', '.m', '.mi', '.mm', '.M', '.mii',
                 '.h', '.H', '.hp', '.hxx', '.hpp', '.HPP', '.h++', '.tcc',
                 '.s', '.S', '.sx'):
        is_compiling = True
        output_object_files.append(base + '.o')
      elif ext == '.o':
        used_object_files.append(arg)
    elif arg == '-v':
      is_verbose = True
    elif arg.startswith('-O'):
      opt = arg
      continue
    elif arg.startswith('-g'):
      has_debug = True
    elif arg == '-E':
      is_preproc = True
      do_link = False
    elif arg == '-c':
      is_writing_object_files = True
      do_link = False
    elif arg in ('-S', '-M', '-MM'):
      is_writing_object_files = do_link = False
    elif arg.startswith('-B'):
      if len(arg) == 2:
        if argi < len(argv):
          bdir = argv[argi]
      else:
        bdir = arg[2:]
    elif arg.startswith('-o'):
      if len(arg) == 2:
        if argi < len(argv):
          output_file = argv[argi]
      else:
        output_file = arg[2:]
    elif (
        arg in ('--sysroot', '--gcc-toolchain', '-target', '-m64',
                '-sysld', '--sysld', '-p', '-pg', '-pie', '-fpic', '-fPIC',
                '-fpie', '-fPIE', '-shared', '-shared-libgcc',
                '-nostdinc++', '-m64') or
        # -target is Cland-specific.
        arg.startswith('--sysroot=') or
        arg.startswith('--gcc-toolchain=')):
      sys.stderr.write('fatal: unsupported xtiny flag: %s\n' % arg)
      sys.exit(1)
    elif arg in ('-static-libgcc', '-s', '-static', '-m32'):
      continue
    elif arg == '-mxtiny-wrap-linker':  # Specify only if debugging xtiny.
      do_xtiny_wrap_linker = True
      continue
    elif arg == '-mno-xtiny-wrap-linker':  # Specify only if debugging xtiny.
      # TODO(pts): How is this useful for debugging?
      #
      # With -mno-xtiny-wrap-linker gcc still works, but the linker
      # command-line contains too many `-L' directories, so `-lm' would try
      # to link against the system libm.a; also the output executable is not
      # stripped (with strip_elf_executable), and constructors and
      # destructors are not called.
      do_xtiny_wrap_linker = False
      continue
    elif arg == '-mxtiny-linker-script':  # Specify only if debugging xtiny.
      do_xtiny_linker_script = True
      continue
    elif arg == '-mno-xtiny-linker-script':  # Specify only if debugging xtiny.
      do_xtiny_linker_script = False
      continue
    elif arg == '-mxtiny-sstrip':  # Specify only if debugging xtiny.
      do_xtiny_sstrip = True
      continue
    elif arg == '-mno-xtiny-sstrip':  # Specify only if debugging xtiny.
      do_xtiny_sstrip = False
      continue
    elif arg == '-mxtiny-gcs':
      do_xtiny_gc_sections = True
      continue
    elif arg == '-mno-xtiny-gcs':
      do_xtiny_gc_sections = False
      continue
    elif arg.startswith('-mxtiny-ld='):
      xtiny_ld = arg.split('=', 1)[1]
      continue
    elif arg == '-mxtiny-forward-malloc':
      forward_malloc_heap_size = 1200000000  # 1.2 GB.
      continue
    elif arg == '-mno-xtiny-forward-malloc':
      forward_malloc_heap_size = 0
      continue
    elif arg.startswith('-mxtiny-forward-malloc='):
      forward_malloc_heap_size = int(arg.split('=', 1)[1])
      continue
    elif arg == '-Wl,--gc-sections':
      has_gc_sections = True
    elif arg == '-nostdlib':
      do_defaultlibs = do_startfiles = False
    elif arg == '-nodefaultlibs':
      do_defaultlibs = False
    elif arg == '-nostartfiles':
      do_startfiles = False
    elif arg == '-nostdinc':
      do_stdinc = False
      continue
    args_kept.append(arg)

  if is_writing_object_files:
    if output_file is not None:
      del output_object_files[:]
      output_object_files.append(output_file)
  else:
    del output_object_files[:]

  if xtiny_ld is None:
    if do_xtiny_wrap_linker:
      xtiny_ld = '.xtiny'
    else:
      xtiny_ld = '.compiler'
  if (do_xtiny_linker_script and
      (do_xtiny_gc_sections or has_gc_sections) and
      not do_xtiny_wrap_linker):
    print >>sys.stderr, 'fatal: if you use -Wl,--gc-sections or -mxtiny-gcs, you need -mxtiny-wrap-linker (default) or -mno-xtiny-linker-script'
    sys.exit(2)
  if not do_xtiny_wrap_linker and xtiny_ld != '.compiler':
    print >>sys.stderr, 'fatal: if you use -mxtiny-wrap-linker, only -mxtiny-ld=.compiler works'
    sys.exit(2)
  cmd = list(compiler_cmd)
  cmd.append('-m32')
  if is_compiling or is_preproc:
    # For detecting whether <xtiny.h> should be included.
    cmd.append('-D__XTINY__')
    if do_defaultlibs:
      cmd.append('-D__XTINY_DEFAULTLIBS__')
    if forward_malloc_heap_size is not None:
      cmd.append('-D__XTINY_FORWARD_MALLOC__=%s' % forward_malloc_heap_size)
  if is_compiling:
    if is_clang:
      # To avoid this (which only appears with `clang -c' and `clang -S':
      # argument clang-3.3.bin: warning: argument unused during compilation: '-fno-ident'
      cmd.append('-Qunused-arguments')
    if opt is not None:
      cmd.append(opt)
    # Without this we get the following error compiling binutils 2.20.1:
    # chew.c:(.text+0x233f): undefined reference to `__stack_chk_fail'
    #
    # Please note that gdb doesn't need the frame pointer for debugging,
    # because it has the unwind tables.
    cmd.extend(('-fno-stack-protector', '-fomit-frame-pointer'))
    # -fno-ident prevents generating the .comment section by preventing
    # this in the generated .s file: .ident  "GCC: ..."
    cmd.append('-fno-ident')
    # Prevent `conflicting types for built-in function' error with
    # `xtiny gcc -Wsystem-headers -W -Wall -Werror'.
    if is_clang:
      # Clang 3.3 doesn't support -fno-builtin-exit etc.
      cmd.append('-fno-builtin')
    else:
      cmd.extend(('-fno-builtin-exit', '-fno-builtin-_exit',
                  '-fno-builtin-_Exit'))
    if not has_debug:  # CFI, .eh_frame .eh_frame_hdr
      # -fno-unwind-tables is the default, we just play it safe.
      cmd.extend(('-fno-unwind-tables', '-fno-asynchronous-unwind-tables',))
    if not do_stdinc:
      # This wipes out the include list for gcc, clang and pts-clang.
      # Ubuntu Lucid clang-3.0 doesn't respect `-nostdinc'.
      cmd.extend(('-nostdinc', '-isysroot', '/dev/null/noisysroot'))
      # TODO(pts): Try -nostdsysteminc -nobuiltininc for clang.
    else:
      # clang     default order: -I, /usr/include, clang-include, gcc-include
      # pts-clang default order: -I, /usr/include, clang-include
      # gcc       default order: -I, gcc-include, /usr/include
      # pts-xtiny default order: -I, xtiny-include, (gcc|clang)-include

      # Puts it in front of -isysroot.
      cmd.extend(('-isystem', '%s/include' % progdir))
      if is_clang:
        if compiler_include_dir is None:
          compiler_include_dir = find_compiler_include_dir(
              compiler_cmd[0], progdir)
        cmd.extend(('-nostdinc', '-isysroot', '/dev/null/noisysroot',
                    '-isystem', compiler_include_dir))
      else:  # GCC.
        # Remove /usr/include, but keep gcc-include. Don't use -nostdinc, that
        # would remove gcc-include as well.
        cmd.extend(('-isysroot', '%s/noisysroot' % progdir))
    if opt in (None, '-Os'):
      # TODO(pts): clang-3.9: warning: optimization flag '-falign-functions=1' is not supported
      cmd.extend(('-Os', '-falign-functions=1'))
      if not is_clang:  # Clang 3.4 doesn't have these.
        cmd.extend(('-mpreferred-stack-boundary=2',
                    '-falign-jumps=1', '-falign-loops=1'))
    if do_xtiny_gc_sections:
      cmd.extend(('-ffunction-sections', '-fdata-sections'))
  # Please note that clang doesn't use an external `as' the as symlink is
  # irrelevant.
  if do_link and do_xtiny_wrap_linker:
    cmd.extend(('-B', '%s/bdir' % progdir))  # Wrap ld and as.
  elif is_compiling:  # Just for the assembler (adir/as --> as.xtiny).
    cmd.extend(('-B', '%s/adir' % progdir))
  if do_link:
    if does_contain_linker_plugin(cmd):
      cmd.append('-fno-use-linker-plugin')  # For gcc-6 and gcc-7.
    # -s is not necessary here, it would be passed as `ld -s', but `ld -T'
    # with the linker script overrides that. We specigy -s anyway so that it
    # will work with linkers ignoring the -T flag (e.g. GNU gold).
    if not has_debug:
      cmd.extend(('-s',))
    # -static is passed to ld. Even without that linking .so files wouldn't
    # work (could not read symbols: File in wrong format). But specifying
    # -static improves the error message.
    #
    # -Wl,-z,norelro is not needed, it affects only dynamic executables, and
    # it will emit a PT_GNU_RELRO to the program headers.
    # http://www.airs.com/blog/archives/189
    #
    # Without -Wl,--build-id=none, a PT_NOTE (.note.gnu.build-id) would be
    # added to the program headers.
    #
    # -Wl,-N unifies the .text and .data (and .bss) sectons, making them both
    # rwx, and emitting a single PT_LOAD program header for them. This makes a
    # difference if do_xtiny_linker_script is false. This works with ld and
    # gold.
    cmd.extend(('-static', '-nostdlib', '-Wl,--build-id=none', '-Wl,-N'))
    if not do_startfiles:
      cmd.append('-Wl,--xtiny-ld-notrs')
    if do_xtiny_gc_sections:
      cmd.append('-Wl,--gc-sections')
    if do_xtiny_wrap_linker:
      if xtiny_ld == '.compiler':  # Use whatever linker gcc uses.
        if compiler_ld is not None:
          xtiny_ld = compiler_ld
        else:
          xtiny_ld = get_bdir_prog_path(compiler_cmd[0], bdir, 'ld')
        if is_clang and xtiny_ld.endswith('/clangld32/ld'):
          # pts-clang. Append .bin to the compiler name, because the wrapper
          # binary rejects the -B flag.
          #
          # Please note that there is no problem for non-linking (e.g. -E, -c)
          # with the pts-clang wrapper, so we don't modify it.
          cmd[0] += '.bin'
          if do_xtiny_linker_script:
            # pts-clang uses the GNU gold linker, which ignores -T for the
            # linker script. Let's use the system ld instead.
            xtiny_ld = progdir + '/ld.xtiny'
      elif xtiny_ld == '.xtiny':
        xtiny_ld = progdir + '/ld.xtiny'
      assert ',' not in xtiny_ld, xtiny_ld
      if is_verbose:
        cmd.append('-Wl,--xtiny-ld-v')
      if not do_xtiny_sstrip:
        cmd.append('-Wl,--xtiny-ld-noss')
      if forward_malloc_heap_size is not None:
        cmd.append('-Wl,--defsym=__forward_malloc_heap_end='
                   '__forward_malloc_heap+%s' % forward_malloc_heap_size)
      if used_object_files:
        if [1 for fn in used_object_files if ',' in fn]:
          sys.stderr.write('fatal: comma specified in .o filename')
          sys.exit(1)
        cmd.append(
            '-Wl,--xtiny-ld-uof,%s,--xtiny-ld-uof-end' %
            ','.join(used_object_files))
      # This must be appended last because of --xtiny-run-ld.
      cmd.append('-Wl,--xtiny-run-ld,' + xtiny_ld)
  cmd.extend(args_kept)
  if do_link:
    if do_startfiles:
      # .a files must be between the .c .o files and the linker script (-T).
      cmd.append('%s/lib__xtiny_start_nn.a' % progdir)
    else:
      # Make exit() and _exit() still available from user code.
      cmd.append('%s/lib__xtiny_exit.a' % progdir)
    if do_defaultlibs:
      cmd.append('%s/lib__xtiny.a' % progdir)
    if do_xtiny_wrap_linker:
      cmd.extend(('-L---',))
  if do_link and do_xtiny_linker_script:
    # There is no search path for linker scripts, even a relative path would
    # make ld look for only that name.
    #
    # `ld -T' must be specified after the actual .o and .a files if the
    # linker script contains TARGET(elf32-little) (not required anymore).
    cmd.extend(('-Wl,-T,%s/xtiny.scr' % progdir,))
  run_command(cmd, 'compiler', is_verbose, do_exec=not output_object_files)

  is_ok = False
  try:
    for filename in output_object_files:
      remove_note_gnu_stack_from_elfo(filename)
    is_ok = True
  finally:
    if not is_ok:
      maybe_remove_files(output_object_files)


if __name__ == '__main__':
  sys.exit(main(sys.argv))
